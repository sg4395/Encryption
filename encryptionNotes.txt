Lv1 : check password and email against stored.

Lv2: lv1 but password is now encrypted. But if we deploy our website and git repo, then people can see our encryption method of secret key.

Use mongoose-encryption:
 Const secret= "randomString"
xxxxxxSchema.plugin(encrypt,{secret:secret, encryptedFields: ['field1, field2'] });
Plug in is before creating collection using Schema. Plugin enriches schema function.

use dotENV (.env):
To store sensitive info in hidden file that wont be seen, use dotenv to add environment variable to store sensitive info.
require('dotenv'),config(); no need for const. Because we don't need to call it back, only need it up and running right at the start.
touch .env in your root directory. This is a hidden file.
Add environment variables in the form of NAME=value.

To fetch it back out into app.js use process.env.NAME
Use gitignore to include .env file.

lv3: hashing
problem with level 2 is it requires a key or a encryption method.

hashing turns  password into a hash that basically are designed to go forward rather than both ways.

1. when people register with their password, it gets turned into a hash thats then stored on database server.
2. when people login with their password, the password entered gets turned into a hash and is then compared with the database server hash.

* this works because for example. if you were to hack into the database and got the hash, it wouldnt do anything because you can't convert it back to
the original entry. so even if you were to type the hash as password, since the result will be the hash of what you typed, you wont get the same result.
